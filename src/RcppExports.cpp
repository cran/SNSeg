// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_med2
double cpp_med2(Rcpp::NumericVector xx);
RcppExport SEXP _SNSeg_cpp_med2(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_med2(xx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_quantile
double cpp_quantile(Rcpp::NumericVector xx, double q);
RcppExport SEXP _SNSeg_cpp_quantile(SEXP xxSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_quantile(xx, q));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cumquantile
NumericVector cpp_cumquantile(Rcpp::NumericVector xx, double q);
RcppExport SEXP _SNSeg_cpp_cumquantile(SEXP xxSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cumquantile(xx, q));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_median_constrast_Cpp
NumericVector cumsum_median_constrast_Cpp(NumericVector ts, String type);
RcppExport SEXP _SNSeg_cumsum_median_constrast_Cpp(SEXP tsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_median_constrast_Cpp(ts, type));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_quantile_constrast_Cpp_check
NumericVector cumsum_quantile_constrast_Cpp_check(NumericVector ts, String type, double q);
RcppExport SEXP _SNSeg_cumsum_quantile_constrast_Cpp_check(SEXP tsSEXP, SEXP typeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_quantile_constrast_Cpp_check(ts, type, q));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_quantile_constrast_Cpp
NumericVector cumsum_quantile_constrast_Cpp(NumericVector ts, String type, double q);
RcppExport SEXP _SNSeg_cumsum_quantile_constrast_Cpp(SEXP tsSEXP, SEXP typeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_quantile_constrast_Cpp(ts, type, q));
    return rcpp_result_gen;
END_RCPP
}
// cpp_acf
double cpp_acf(NumericVector ts);
RcppExport SEXP _SNSeg_cpp_acf(SEXP tsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ts(tsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_acf(ts));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_acf_constrast_Cpp
NumericVector cumsum_acf_constrast_Cpp(NumericVector ts, String type);
RcppExport SEXP _SNSeg_cumsum_acf_constrast_Cpp(SEXP tsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_acf_constrast_Cpp(ts, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SNSeg_cpp_med2", (DL_FUNC) &_SNSeg_cpp_med2, 1},
    {"_SNSeg_cpp_quantile", (DL_FUNC) &_SNSeg_cpp_quantile, 2},
    {"_SNSeg_cpp_cumquantile", (DL_FUNC) &_SNSeg_cpp_cumquantile, 2},
    {"_SNSeg_cumsum_median_constrast_Cpp", (DL_FUNC) &_SNSeg_cumsum_median_constrast_Cpp, 2},
    {"_SNSeg_cumsum_quantile_constrast_Cpp_check", (DL_FUNC) &_SNSeg_cumsum_quantile_constrast_Cpp_check, 3},
    {"_SNSeg_cumsum_quantile_constrast_Cpp", (DL_FUNC) &_SNSeg_cumsum_quantile_constrast_Cpp, 3},
    {"_SNSeg_cpp_acf", (DL_FUNC) &_SNSeg_cpp_acf, 1},
    {"_SNSeg_cumsum_acf_constrast_Cpp", (DL_FUNC) &_SNSeg_cumsum_acf_constrast_Cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SNSeg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
